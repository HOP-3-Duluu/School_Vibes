org: nasanbat
app: demo
service: demoday
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  region`: ap-southeast-1

functions:
  getTask:
    handler: src/controller/task.getTask
    events:
      - httpApi:
          path: /task/{id}
          method: get
  getTodayTask:
    handler: src/controller/task.getTodayTask
    events:
      - httpApi:
          path: /taskToday
          method: get
  getTaskByDate:
    handler: src/controller/task.getTaskByDate
    events:
      - httpApi:
          path: /taskDate/{id}
          method: get
  createTask:
    handler: src/controller/task.createTask
    events:
      - httpApi:
          path: /task
          method: post
  deleteTask:
    handler: src/controller/task.deleteTask
    events:
      - httpApi:
          path: /task
          method: delete
  updateTask:
    handler: src/controller/task.updateTask
    events:
      - httpApi:
          path: /task
          method: put
  login:
    handler: src/controller/user.Login
    events:
      - httpApi:
          path: /login
          method: post

  createGroup:
    handler: src/controller/group.createGroup
    events:
      - httpApi:
          path: /group
          method: post
  deleteGroup:
    handler: src/controller/group.deleteGroup
    events:
      - httpApi:
          path: /group
          method: delete
  getGroup:
    handler: src/controller/group.getGroup
    events:
      - httpApi:
          path: /group/{id}
          method: get
  getUserGroup:
    handler: src/controller/group.getUserGroup
    events:
      - httpApi:
          path: /userGroup/{id}
          method: get
  updateGroup:
    handler: src/controller/group.updateGroup
    events:
      - httpApi:
          path: /group
          method: put

  createUser:
    handler: src/controller/user.createUser
    events:
      - httpApi:
          path: /user
          method: post
  deleteUser:
    handler: src/controller/user.deleteUser
    events:
      - httpApi:
          path: /user
          method: delete
  getUser:
    handler: src/controller/user.getUser
    events:
      - httpApi:
          path: /user/{id}
          method: get
  updateUser:
    handler: src/controller/user.updateUser
    events:
      - httpApi:
          path: /user
          method: put
  createContent:
    handler: src/controller/addPhoto.CreateContent
    events:
      - httpApi:
          path: /createContent
          method: post

plugins:
  - serverless-plugin-typescript
  - serverless-offline
